package com.joao.estruturaDeDados.entities;

import java.util.Arrays;

import com.joao.estruturaDeDados.abstracts.AbstractContainer;
import com.joao.estruturaDeDados.interfaces.Stack;

public class StackAsArray extends AbstractContainer implements Stack {

	protected Object[] array;
	protected int count;
	private Object object;

	public StackAsArray(int size) { // construtor
		array = new Object[size]; // o parametro size é o número máx de itens que podem ser colocados na pilha
		count = 0;
	}

	// a função do método purge é remover todos os elementos de um container.
	// os objetos em uma pilha ocupam as primeiras "count" posições do vetor.
	// para esvaziar a pilha, o método purge atribui o valor null as primeiras
	// "count" posições do vetor.
	// LIMPAR A PILHA
	@Override
	public void purge() {

		while (count > 0) {
			array[--count] = null;
		}
	}

	// o método pop remove e retorna um elemento da pilha
	
	// primeiro o método verifica se a pilha está ou não vazia, ele chama a exceção
	// ContainerEmptyException.
	// Caso contrário,ele diminui a variável "contador" de uma unidade e retorna o
	// item encontrado no topo da pilha.
	// DESEMPILHAR
	@Override
	public Object pop() {
	    if (count == 0) {
	        return null; // pilha vazia
	    }
	    Object result = array[--count]; // decrementa count e pega o elemento do topo
	    array[count] = null; // remove referência
	    return result;
	}

	//método push, ele insere um elemento na pilha.
	
	//ele verifica primeiro se existe um lugar na pilha. Se não existe lugar para inserção na pilha, ele chama a exceção.
	//caso contrário ele coloca o objeto no vetor e incrementa uma unidade a variável count.
	//
	@Override
	public void push(Object object) {
		if (count < array.length) {
			// throw new ContainerFullException();
			array[count++] = object;
		}else {
			System.out.println("Pilha cheia");
		}
	}
	// retorna o ultimo objeto da pilha
	@Override
	public Object getTop() {
		if (count > 0) {
			return array[count - 1];
		} else {
			return null;
		}
	}
	
	

// métodos da herança 
	
	  public String toString() {
	        StringBuilder sb = new StringBuilder();
	        sb.append("Pilha: ");
	        for (int i = 0; i < count; i++) {
	            sb.append(array[i]);
	        }
	        return sb.toString();
	    }


	@Override
	protected int compareTo(Comparable arg) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	@Override
	public int compareTo(Object o) {
		// TODO Auto-generated method stub
		return 0;
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}

}
